components: rewrites 
References
Regular expressions


Filter sidebar

Description
Specifications
Browser compatibility
See also
JavaScript
Tutorials
Complete beginners
JavaScript Guide
Intermediate
Advanced
References
Built-in objects
Expressions & operators
Statements & declarations
Functions
Classes
Regular expressions
Overview
Backreference: \1, \2
Capturing group: (...)
Character class escape: \d, \D, \w, \W, \s, \S
Character class: [...], [^...]
Character escape: \n, \u{...}
Disjunction: |
Input boundary assertion: ^, $
Literal character: a, b
Lookahead assertion: (?=...), (?!...)
Lookbehind assertion: (?<=...), (?<!...)
Named backreference: \k<name>
Named capturing group: (?<name>...)
Non-capturing group: (?:...)
Quantifier: *, +, ?, {n}, {n,}, {n,m}
Unicode character class escape: \p{...}, \P{...}
Wildcard: .
Word boundary assertion: \b, \B
Errors
Misc
Regular expressions

A regular expression (regex for short) allow developers to match strings against a pattern, extract submatch information, or simply test if the string conforms to that pattern. Regular expressions are used in many programming languages, and JavaScript's syntax is inspired by Perl.

You are encouraged to read the regular expressions guide to get an overview of the available regex syntaxes and how they work.

Description
Regular expressions are a important concept in formal language theory. They are a way to describe a possibly infinite set of character strings (called a language). A regular expression, at its core, needs the following features:

A set of characters that can be used in the language, called the alphabet.
Concatenation: ab means "the character a followed by the character b".
Union: a|b means "either a or b".
Kleene star: a* means "zero or more a characters".
Assuming a finite alphabet (such as the 26 letters of the English alphabet, or the entire Unicode character set), all regular languages can be generated by the features above. Of course, many patterns are very tedious to express this way (such as "10 digits" or "a character that's not a space"), so JavaScript regular expressions include many shorthands, introduced below.

Note: JavaScript regular expressions are in fact not regular, due to the existence of backreferences (regular expressions must have finite states). However, they are still a very useful feature.
Creating regular expressions
A regular expression is typically created as a literal by enclosing a pattern in forward slashes (/):

JS
Copy to Clipboard
const regex1 = /ab+c/g;
Regular expressions can also be created with the RegExp() constructor:

JS
Copy to Clipboard
const regex2 = new RegExp("ab+c", "g");
They have no runtime differences, although they may have implications on performance, static analyzability, and authoring ergonomic issues with escaping characters. For more information, see the RegExp reference.

Regex flags
Flags are special parameters that can change the way a regular expression is interpreted or the way it interacts with the input text. Each flag corresponds to one accessor property on the RegExp object.

Flag	Description	Corresponding property
d	Generate indices for substring matches.	hasIndices
g	Global search.	global
i	Case-insensitive search.	ignoreCase
m	Allows ^ and $ to match newline characters.	multiline
s	Allows . to match newline characters.	dotAll
u	"Unicode"; treat a pattern as a sequence of Unicode code points.	unicode
v	An upgrade to the u mode with more Unicode features.	unicodeSets
y	Perform a "sticky" search that matches starting at the current position in the target string.	sticky
The sections below list all available regex syntaxes, grouped by their syntactic nature.

Assertions
Assertions are constructs that test whether the string meets a certain condition at the specified position, but not consume characters. Assertions cannot be quantified.

Input boundary assertion: ^, $
Asserts that the current position is the start or end of input, or start or end of a line if the m flag is set.

Lookahead assertion: (?=...), (?!...)
Asserts that the current position is followed or not followed by a certain pattern.

Lookbehind assertion: (?<=...), (?<!...)
Asserts that the current position is preceded or not preceded by a certain pattern.

Word boundary assertion: \b, \B
Asserts that the current position is a word boundary.

Atoms
Atoms are the most basic units of a regular expression. Each atom consumes one or more characters in the string, and either fails the match or allows the pattern to continue matching with the next atom.

Backreference: \1, \2
Matches a previously matched subpattern captured with a capturing group.

Capturing group: (...)
Matches a subpattern and remembers information about the match.

Character class: [...], [^...]
Matches any character in or not in a set of characters. When the v flag is enabled, it can also be used to match finite-length strings.

Character class escape: \d, \D, \w, \W, \s, \S
Matches any character in or not in a predefined set of characters.

Character escape: \n, \u{...}
Matches a character that may not be able to be conveniently represented in its literal form.

Literal character: a, b
Matches a specific character.

Named backreference: \k<name>
Matches a previously matched subpattern captured with a named capturing group.

Named capturing group: (?<name>...)
Matches a subpattern and remembers information about the match. The group can later be identified by a custom name instead of by its index in the pattern.

Non-capturing group: (?:...)
Matches a subpattern without remembering information about the match.

Unicode character class escape: \p{...}, \P{...}
Matches a set of characters specified by a Unicode property. When the v flag is enabled, it can also be used to match finite-length strings.

Wildcard: .
Matches any character except line terminators, unless the s flag is set.

Other features
These features do not specify any pattern themselves, but are used to compose patterns.

Disjunction: |
Matches any of a set of alternatives separated by the | character.

Quantifier: *, +, ?, {n}, {n,}, {n,m}
Matches an atom a certain number of times.

Escape sequences
Escape sequences in regexes refer to any kind of syntax formed by \ followed by one or more characters. They may serve very different purposes depending on what follow \. Below is a list of all valid "escape sequences":

Escape sequence	Followed by	Meaning
\B	None	Non-word-boundary assertion
\D	None	Character class escape representing non-digit characters
\P	{, a Unicode property and/or value, then }	Unicode character class escape representing characters without the specified Unicode property
\S	None	Character class escape representing non-white-space characters
\W	None	Character class escape representing non-word characters
\b	None	Word boundary assertion; inside character classes, represents U+0008 (BACKSPACE)
\c	A letter from A to Z or a to z	A character escape representing the control character with value equal to the letter's character value modulo 32
\d	None	Character class escape representing digit characters (0 to 9)
\f	None	Character escape representing U+000C (FORM FEED)
\k	<, an identifier, then >	A named backreference
\n	None	Character escape representing U+000A (LINE FEED)
\p	{, a Unicode property and/or value, then }	Unicode character class escape representing characters with the specified Unicode property
\q	{, a string, then a }	Only valid inside v-mode character classes; represents the string to be matched literally
\r	None	Character escape representing U+000D (CARRIAGE RETURN)
\s	None	Character class escape representing whitespace characters
\t	None	Character escape representing U+0009 (CHARACTER TABULATION)
\u	4 hexadecimal digits; or {, 1 to 6 hexadecimal digits, then }	Character escape representing the character with the given code point
\v	None	Character escape representing U+000B (LINE TABULATION)
\w	None	Character class escape representing word characters (A to Z, a to z, 0 to 9, _)
\x	2 hexadecimal digits	Character escape representing the character with the given value
\0	None	Character escape representing U+0000 (NULL)
\ followed by any other digit character becomes a legacy octal escape sequence, which is forbidden in Unicode-aware mode.

In addition, \ can be followed by some non-letter-or-digit characters, in which case the escape sequence is always a character escape representing the escaped character itself:

\$, \(, \), \*, \+, \., \/, \?, \[, \\, \], \^, {, \|, }: valid everywhere
\-: only valid inside character classes
\!, \#, \%, \&, \,, \:, \;, \<, \=, \>, \@, \`, \~: only valid inside v-mode character classes
The other ASCII characters, namely space character, ", ', _, and any letter character not mentioned above, are not valid escape sequences. In Unicode-unaware mode, escape sequences that are not one of the above become identity escapes: they represent the character that follows the backslash. For example, \a represents the character a. This behavior limits the ability to introduce new escape sequences without causing backward compatibility issues, and is therefore forbidden in Unicode-aware mode.

Specifications
Specification
ECMAScript Language Specification 
# prod-DecimalEscape
ECMAScript Language Specification 
# prod-Atom
ECMAScript Language Specification 
# prod-CharacterClass
ECMAScript Language Specification 
# prod-CharacterClassEscape
ECMAScript Language Specification 
# prod-CharacterEscape
ECMAScript Language Specification 
# prod-Disjunction
ECMAScript Language Specification 
# prod-Assertion
ECMAScript Language Specification 
# prod-PatternCharacter
ECMAScript Language Specification 
# prod-AtomEscape
ECMAScript Language Specification 
# prod-Quantifier
Browser compatibility
Report problems with this compatibility data on GitHub
Backreference: \1, \2

Full support
Chrome
1
Toggle history

Full support
Edge
12
Toggle history

Full support
Firefox
1
Toggle history

Full support
Opera
5
Toggle history

Full support
Safari
1
Toggle history

Full support
Chrome Android
18
Toggle history

Full support
Firefox for Android
4
Toggle history

Full support
Opera Android
10.1
Toggle history

Full support
Safari on iOS
1
Toggle history

Full support
Samsung Internet
1.0
Toggle history

Full support
WebView Android
4.4
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
0.10.0
Toggle history
Capturing group: (...)

Full support
Chrome
1
Toggle history

Full support
Edge
12
Toggle history

Full support
Firefox
1
Toggle history

Full support
Opera
5
Toggle history

Full support
Safari
1
Toggle history

Full support
Chrome Android
18
Toggle history

Full support
Firefox for Android
4
Toggle history

Full support
Opera Android
10.1
Toggle history

Full support
Safari on iOS
1
Toggle history

Full support
Samsung Internet
1.0
Toggle history

Full support
WebView Android
4.4
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
0.10.0
Toggle history
Character class: [...], [^...]

Full support
Chrome
1
Toggle history

Full support
Edge
12
Toggle history

Full support
Firefox
1
Toggle history

Full support
Opera
5
Toggle history

Full support
Safari
1
Toggle history

Full support
Chrome Android
18
Toggle history

Full support
Firefox for Android
4
Toggle history

Full support
Opera Android
10.1
Toggle history

Full support
Safari on iOS
1
Toggle history

Full support
Samsung Internet
1.0
Toggle history

Full support
WebView Android
4.4
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
0.10.0
Toggle history
Character class escape: \d, \D, \w, \W, \s, \S

Full support
Chrome
1
Toggle history

Full support
Edge
12
Toggle history

Full support
Firefox
1
Toggle history

Full support
Opera
5
Toggle history

Full support
Safari
1
Toggle history

Full support
Chrome Android
18
Toggle history

Full support
Firefox for Android
4
Toggle history

Full support
Opera Android
10.1
Toggle history

Full support
Safari on iOS
1
Toggle history

Full support
Samsung Internet
1.0
Toggle history

Full support
WebView Android
4.4
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
0.10.0
Toggle history
Character escape: \n, \x

Full support
Chrome
1
Toggle history

Full support
Edge
12
Toggle history

Full support
Firefox
1
Toggle history

Full support
Opera
5
Toggle history

Full support
Safari
1
Toggle history

Full support
Chrome Android
18
Toggle history

Full support
Firefox for Android
4
Toggle history

Full support
Opera Android
10.1
Toggle history

Full support
Safari on iOS
1
Toggle history

Full support
Samsung Internet
1.0
Toggle history

Full support
WebView Android
4.4
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
0.10.0
Toggle history
Unicode character escape: \u{...}

Full support
Chrome
50
Toggle history

Full support
Edge
12
Toggle history

Full support
Firefox
46
Toggle history

Full support
Opera
37
Toggle history

Full support
Safari
10
Toggle history

Full support
Chrome Android
50
Toggle history

Full support
Firefox for Android
46
Toggle history

Full support
Opera Android
37
Toggle history

Full support
Safari on iOS
10
Toggle history

Full support
Samsung Internet
5.0
Toggle history

Full support
WebView Android
50
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
6.0.0
Toggle history
Disjunction: |

Full support
Chrome
1
Toggle history

Full support
Edge
12
Toggle history

Full support
Firefox
1
Toggle history

Full support
Opera
5
Toggle history

Full support
Safari
1
Toggle history

Full support
Chrome Android
18
Toggle history

Full support
Firefox for Android
4
Toggle history

Full support
Opera Android
10.1
Toggle history

Full support
Safari on iOS
1
Toggle history

Full support
Samsung Internet
1.0
Toggle history

Full support
WebView Android
4.4
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
0.10.0
Toggle history
Input boundary assertion: ^, $

Full support
Chrome
1
Toggle history

Full support
Edge
12
Toggle history

Full support
Firefox
1
Toggle history

Full support
Opera
5
Toggle history

Full support
Safari
1
Toggle history

Full support
Chrome Android
18
Toggle history

Full support
Firefox for Android
4
Toggle history

Full support
Opera Android
10.1
Toggle history

Full support
Safari on iOS
1
Toggle history

Full support
Samsung Internet
1.0
Toggle history

Full support
WebView Android
4.4
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
0.10.0
Toggle history
Literal character: a, b

Full support
Chrome
1
Toggle history

Full support
Edge
12
Toggle history

Full support
Firefox
1
Toggle history

Full support
Opera
5
Toggle history

Full support
Safari
1
Toggle history

Full support
Chrome Android
18
Toggle history

Full support
Firefox for Android
4
Toggle history

Full support
Opera Android
10.1
Toggle history

Full support
Safari on iOS
1
Toggle history

Full support
Samsung Internet
1.0
Toggle history

Full support
WebView Android
4.4
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
0.10.0
Toggle history
Lookahead assertion: (?=...), (?!...)

Full support
Chrome
1
Toggle history

Full support
Edge
12
Toggle history

Full support
Firefox
1
Toggle history

Full support
Opera
5
Toggle history

Full support
Safari
1
Toggle history

Full support
Chrome Android
18
Toggle history

Full support
Firefox for Android
4
Toggle history

Full support
Opera Android
10.1
Toggle history

Full support
Safari on iOS
1
Toggle history

Full support
Samsung Internet
1.0
Toggle history

Full support
WebView Android
4.4
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
0.10.0
Toggle history
Lookbehind assertion: (?<=...), (?<!...)

Full support
Chrome
62
Toggle history

Full support
Edge
79
Toggle history

Full support
Firefox
78
Toggle history

Full support
Opera
49
Toggle history

Full support
Safari
16.4
Toggle history

Full support
Chrome Android
62
Toggle history

Full support
Firefox for Android
79
Toggle history

Full support
Opera Android
46
Toggle history

Full support
Safari on iOS
16.4
Toggle history

Full support
Samsung Internet
8.0
Toggle history

Full support
WebView Android
62
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
8.10.0
Toggle history
Named backreference: \k<name>

Full support
Chrome
64
Toggle history

Full support
Edge
79
Toggle history

Full support
Firefox
78
Toggle history

Full support
Opera
51
Toggle history

Full support
Safari
11.1
Toggle history

Full support
Chrome Android
64
Toggle history

Full support
Firefox for Android
79
Toggle history

Full support
Opera Android
47
Toggle history

Full support
Safari on iOS
11.3
Toggle history

Full support
Samsung Internet
9.0
Toggle history

Full support
WebView Android
64
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
10.0.0
more
Toggle history
Named capture group: (?<name>...)

Full support
Chrome
64
Toggle history

Full support
Edge
79
Toggle history

Full support
Firefox
78
Toggle history

Full support
Opera
51
Toggle history

Full support
Safari
11.1
Toggle history

Full support
Chrome Android
64
Toggle history

Full support
Firefox for Android
79
Toggle history

Full support
Opera Android
47
Toggle history

Full support
Safari on iOS
11.3
Toggle history

Full support
Samsung Internet
9.0
Toggle history

Full support
WebView Android
64
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
10.0.0
more
Toggle history
Duplicate names in different disjunction alternatives are allowed
Experimental

No support
Chrome
No
Toggle history

No support
Edge
No
Toggle history

No support
Firefox
No
Toggle history

No support
Opera
No
Toggle history

Preview browser support
Safari
TP
Toggle history

No support
Chrome Android
No
Toggle history

No support
Firefox for Android
No
Toggle history

No support
Opera Android
No
Toggle history

No support
Safari on iOS
No
Toggle history

No support
Samsung Internet
No
Toggle history

No support
WebView Android
No
Toggle history

No support
Deno
No
Toggle history

No support
Node.js
No
Toggle history
Non-capturing group: (?:...)

Full support
Chrome
1
Toggle history

Full support
Edge
12
Toggle history

Full support
Firefox
1
Toggle history

Full support
Opera
5
Toggle history

Full support
Safari
1
Toggle history

Full support
Chrome Android
18
Toggle history

Full support
Firefox for Android
4
Toggle history

Full support
Opera Android
10.1
Toggle history

Full support
Safari on iOS
1
Toggle history

Full support
Samsung Internet
1.0
Toggle history

Full support
WebView Android
4.4
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
0.10.0
Toggle history
Quantifier: *, +, ?, {n}, {n,}, {n,m}

Full support
Chrome
1
Toggle history

Full support
Edge
12
Toggle history

Full support
Firefox
1
Toggle history

Full support
Opera
5
Toggle history

Full support
Safari
1
Toggle history

Full support
Chrome Android
18
Toggle history

Full support
Firefox for Android
4
Toggle history

Full support
Opera Android
10.1
Toggle history

Full support
Safari on iOS
1
Toggle history

Full support
Samsung Internet
1.0
Toggle history

Full support
WebView Android
4.4
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
0.10.0
Toggle history
Unicode character class escape: \p{...}, \P{...}

Full support
Chrome
64
Toggle history

Full support
Edge
79
Toggle history

Full support
Firefox
78
Toggle history

Full support
Opera
51
Toggle history

Full support
Safari
11.1
Toggle history

Full support
Chrome Android
64
Toggle history

Full support
Firefox for Android
79
Toggle history

Full support
Opera Android
47
Toggle history

Full support
Safari on iOS
11.3
Toggle history

Full support
Samsung Internet
9.0
Toggle history

Full support
WebView Android
64
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
10.0.0
more
Toggle history
Wildcard: .

Full support
Chrome
1
Toggle history

Full support
Edge
12
Toggle history

Full support
Firefox
1
Toggle history

Full support
Opera
5
Toggle history

Full support
Safari
1
Toggle history

Full support
Chrome Android
18
Toggle history

Full support
Firefox for Android
4
Toggle history

Full support
Opera Android
10.1
Toggle history

Full support
Safari on iOS
1
Toggle history

Full support
Samsung Internet
1.0
Toggle history

Full support
WebView Android
4.4
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
0.10.0
Toggle history
Word boundary assertion: \b, \B

Full support
Chrome
1
Toggle history

Full support
Edge
12
Toggle history

Full support
Firefox
1
Toggle history

Full support
Opera
5
Toggle history

Full support
Safari
1
Toggle history

Full support
Chrome Android
18
Toggle history

Full support
Firefox for Android
4
Toggle history

Full support
Opera Android
10.1
Toggle history

Full support
Safari on iOS
1
Toggle history

Full support
Samsung Internet
1.0
Toggle history

Full support
WebView Android
4.4
Toggle history

Full support
Deno
1.0
Toggle history

Full support
Node.js
0.10.0
Toggle history
Legend
Tip: you can click/tap on a cell for more information.

Full support
Full support
In development. Supported in a pre-release version.
In development. Supported in a pre-release version.
No support
No support
Experimental. Expect behavior to change in the future.
User must explicitly enable this feature.
Has more compatibility info.
See also
Regular expressions guide
RegExp
